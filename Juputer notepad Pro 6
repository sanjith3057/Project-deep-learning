# program 06 Stock Market Prediction using Recurrent Neural Networks

import numpy as np
import yfinance as yf
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, SimpleRNN
import matplotlib.pyplot as plt
from datetime import datetime
import pandas as pd

# Check yfinance version
print(f"yfinance version: {yf._version_}")

# Fetch data
symbol = "AAPL"
start_date = "2020-01-01"
end_date = datetime.today().strftime('%Y-%m-%d')  # Current date (March 10, 2025)
print(f"Fetching data for {symbol} from {start_date} to {end_date}...")

try:
    df = yf.download(symbol, start=start_date, end=end_date)
    if df.empty:
        raise ValueError("No data retrieved from yfinance.")
    print(f"Data fetched successfully. Rows: {len(df)}")
except Exception as e:
    print(f"Error fetching data: {e}")
    print("Falling back to sample data for testing...")
    # Generate synthetic data as a fallback
    dates = np.arange('2020-01-01', '2025-03-10', dtype='datetime64[D]')
    df = pd.DataFrame({
        'Close': np.random.normal(150, 20, len(dates))  # Random prices around $150
    }, index=dates)

# Prepare data
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(df['Close'].values.reshape(-1, 1))
lookback = 60

X, y = [], []
for i in range(lookback, len(scaled_data)):
    X.append(scaled_data[i-lookback:i, 0])
    y.append(scaled_data[i, 0])

X, y = np.array(X), np.array(y)
X = np.reshape(X, (X.shape[0], X.shape[1], 1))

# Split data
train_size = int(len(X) * 0.8)
X_train, X_test = X[:train_size], X[train_size:]
y_train, y_test = y[:train_size], y[train_size:]

# Build model
model = Sequential([
    SimpleRNN(50, return_sequences=True, input_shape=(lookback, 1)),
    SimpleRNN(50),
    Dense(1)
])
model.compile(optimizer='adam', loss='mean_squared_error')

# Train model
model.fit(X_train, y_train, epochs=10, batch_size=32, verbose=1)

# Make predictions
predictions = model.predict(X_test)
predictions = scaler.inverse_transform(predictions)
actual_prices = scaler.inverse_transform(y_test.reshape(-1, 1))

# Plot results
plt.figure(figsize=(15, 7))
plt.plot(df.index[train_size+lookback:], actual_prices, label='Actual Prices')
plt.plot(df.index[train_size+lookback:], predictions, label='Predicted Prices')
plt.title(f"{symbol} Stock Price Prediction (Synthetic Data if API Failed)")
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.show()
