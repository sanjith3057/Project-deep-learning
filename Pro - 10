# Program - 10
import tensorflow as tf
import tensorflow_hub as hub
import matplotlib.pyplot as plt
import numpy as np
import cv2

# Function to load and preprocess images
def load_and_process_image(image_path, target_size=(256, 256)):
    try:
        img = cv2.imread(image_path)
        if img is None:
            raise FileNotFoundError(f"Could not load image at {image_path}")
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)  # Convert BGR to RGB
        img = cv2.resize(img, target_size)  # Resize the image
        img = np.array(img) / 255.0  # Normalize the image
        img = img[None, :]  # Add batch dimension
        return img
    except Exception as e:
        print(f"Error processing image {image_path}: {e}")
        return None

# Load the pre-trained style transfer model from TensorFlow Hub
try:
    hub_module = hub.load('https://tfhub.dev/google/magenta/arbitrary-image-stylization-v1-256/2')
    print("Model loaded successfully")
except Exception as e:
    print(f"Error loading model: {e}")
    print("Please check your internet connection or try a different model URL")
    hub_module = None

if hub_module is not None:
    # Load the content and style images (replace with your actual image paths)
    content_image_path = r"E:\Pictures\Camera Roll\paper 2.jfif"  # Replace with your path
    style_image_path = r"E:\Pictures\Camera Roll\paper 2.jfif"      # Replace with your path
    
    content_image = load_and_process_image(content_image_path)
    style_image = load_and_process_image(style_image_path)

    if content_image is not None and style_image is not None:
        # Convert images to tensors
        content_image_tensor = tf.convert_to_tensor(content_image, dtype=tf.float32)
        style_image_tensor = tf.convert_to_tensor(style_image, dtype=tf.float32)

        # Perform style transfer using the pre-trained model
        stylized_image = hub_module(content_image_tensor, style_image_tensor)[0]

        # Function to display the images
        def display_images(content_image, style_image, stylized_image):
            plt.figure(figsize=(10, 10))

            # Content image
            plt.subplot(1, 3, 1)
            plt.imshow(content_image[0])
            plt.title("Content Image")
            plt.axis('off')

            # Style image
            plt.subplot(1, 3, 2)
            plt.imshow(style_image[0])
            plt.title("Style Image")
            plt.axis('off')

            # Stylized image
            plt.subplot(1, 3, 3)
            plt.imshow(stylized_image[0])
            plt.title("Stylized Image")
            plt.axis('off')

            plt.show()

        # Display the results
        display_images(content_image, style_image, stylized_image)
    else:
        print("Failed to load one or both images. Please check the file paths.")
else:
    print("Cannot proceed with style transfer due to model loading failure.")
